# -*- coding: utf-8 -*-
"""visualization_module.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dmj92Kc-rImNBDwCjHVL5t0e0iubrQJt
"""

# Commented out IPython magic to ensure Python compatibility.
from collections import Counter
import random
import numpy as np

import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.manifold import TSNE
from wordcloud import WordCloud

import itertools

#Visualization_1
def plot_category_counts(df, title):
    category_cnt = Counter(df)

    plt.figure(figsize=(16,8))
    plt.bar(category_cnt.keys(), category_cnt.values())
    plt.title(title)

    return None

def plot_wordcloud(df):

    # text = open('/content/drive/MyDrive/CDAC-SELF/CDAC_PROJECT/Mental_Graph_Of_User_Using_Social_Media_Posts/project_code/files/cleaned/merged_cleaned.csv').read()
    df.cleaned_sentence

    wordcloud = WordCloud().generate(text)


    # Generate plot
    plt.imshow(wordcloud)
    plt.axis("off")
    plt.show()

def word2token(word):
    try:
        return w2v_model.wv.vocab[word].index
    except KeyError:
        return 0
def token2word(w2v_model, token):
    return w2v_model.wv.index2word[token]



def plot_word2vec_embedding_by_tsne(w2v_model, w2v_vocab_size, plot_n_words=100):
    n_samples = plot_n_words
    # Sample random words from model dictionary
    random_i = random.sample(range(w2v_vocab_size), n_samples)
    random_w = [token2word(w2v_model, i) for i in random_i]

    # Generate Word2Vec embeddings of each word
    word_vecs = np.array([w2v_model[w] for w in random_w])

    # Apply t-SNE to Word2Vec embeddings, reducing to 2 dims
    tsne = TSNE()
    tsne_e = tsne.fit_transform(word_vecs)

    # Plot t-SNE result
    plt.figure(figsize=(24, 20))
    plt.scatter(tsne_e[:, 0], tsne_e[:, 1], marker='o', c=range(len(random_w)), cmap=plt.get_cmap('Spectral'))

    for label, x, y, in zip(random_w, tsne_e[:, 0], tsne_e[:, 1]):
        plt.annotate(label,
                    xy=(x, y), xytext=(0, 15),
                    textcoords='offset points', ha='right', va='bottom',
                    bbox=dict(boxstyle='round, pad=0.2', fc='yellow', alpha=0.1))

    return None

def plot_model_performance_graph(hist_df):
    
    fig, axes = plt.subplots(1,2 , figsize = (15,6))

    # properties  matplotlib.patch.Patch 
    props = dict(boxstyle='round', facecolor='aqua', alpha=0.4)

    ax = axes[0]

    hist_df.plot(y = ['loss','val_loss'], ax = ax, colormap="cividis")

    lossmin = hist_df['loss'].min()

    testmin = hist_df['val_loss'].min()

    # little beautification
    txtstr = "Min Loss: \n Training : {:7.4f}\n Testing   : {:7.4f}".format(lossmin,
                                                                            testmin) #text to plot

    # place a text box in upper left in axes coords

    ax.text(0.4, 0.95, txtstr, transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)

    ax.set_xlabel("Epochs")

    ax.set_ylabel("Loss")

    ax.grid();

    ax = axes[1]

    hist_df.plot( y = ['accuracy', 'val_accuracy'], ax = ax, colormap="cividis")
    acc = hist_df['accuracy'].values
    # little beautification
    accmax = hist_df['accuracy'].max()
    testmax = hist_df['val_accuracy'].max()
    txtstr = "Max Accuracy: \n Training : {:7.4f}\n Testing   : {:7.4f}".format(accmax,
                                                                                testmax) #text to plot

    # place a text box in upper left in axes coords

    ax.text(0.4, 0.5, txtstr, transform=ax.transAxes, fontsize=14,
            verticalalignment='top', bbox=props)

    ax.set_xlabel("Epochs")
    ax.set_ylabel("Accuracy")
    ax.grid();
    plt.tight_layout()

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    plt.figure(figsize=(15,6))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')